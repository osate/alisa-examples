package Devices
public
	with Isolette_Data_Model, Isolette_Properties;

	with Data_Model;

	device Temperature_Sensor
		features
			air: in feature Isolette_Data_Model::PhysicalTemp;
			current_temp: out data port Isolette_Data_Model::DiscreteTemp {
						Data_Model::Real_Range => 68.0 .. 105.0; 
						-- real physical range may be larger
						-- sampled range may be larger or miscalibrated (see out propagation)
						-- is sampled value range bounded by specified range?
						Data_Model::Measurement_Unit => "Fahrenheit";
						Isolette_Properties::Temperature_Accuracy => 0.1 Fahrenheit;
					};
		flows
			temp_reading: flow source current_temp {Latency => 500ms .. 550ms;}; -- Note that sensor is sampling. There is a sampling latency for recognizing a change in temperature
			air_temp_reading: flow path air -> current_temp {Latency => 50ms .. 55ms;}; -- actual sensing of air temp. Sampling is captured by period.
		properties
			Dispatch_Protocol => Periodic; -- jab
			Period => 1 sec; -- jab  
		annex EMV2 {**
			use types IsoletteEM, ErrorLibrary;
			use behavior IsoletteEM::FailStop;
			error propagations
				current_temp: out propagation {SensorError, OutOfRange, OutOfCalibration};
				heaterEffect: in propagation {HeaterError};
			-- may deliver bad or no reading without being aware of it.
				flows
					sensorfails: error source current_temp{SensorError};
					overheat: error path heaterEffect{HeaterError} -> current_temp{OutOfRange};
			end propagations;
			propagation paths
				heaterEffect: propagation point;
			end paths;
			properties
				EMV2::OccurrenceDistribution => [
							ProbabilityValue => Isolette_Constants::TemperatureSensorFailureRateValue;]
							applies to failed, sensorfails.SensorError;
		**};
	end Temperature_Sensor;

	device implementation Temperature_Sensor.impl
	end Temperature_Sensor.impl;

	device Heat_Source
		features
			heat_control: in data port Isolette_Data_Model::On_Off;
			heat_out: out feature Isolette_Data_Model::Heat;
		flows
			heatOnOff: flow path heat_control -> heat_out { Latency => 500 ms .. 550 ms;};
		properties
			Dispatch_Protocol => Periodic; -- jab
			Period => 1 sec; -- jab  
		annex EMV2 {**
			use types IsoletteEM;
			use behavior IsoletteEM::FailStop;
			
			error propagations
				heat_control: in propagation {RegulatorError};
				heat_out: out propagation {HeaterError};
			flows
				controlpassthru: error path heat_control {RegulatorError} -> heat_out {HeaterError}; -- incorrect on/off maps into commission and omission
				HSFail: error source heat_out {HeaterError};
			end propagations;
			
			properties
				EMV2::OccurrenceDistribution => [
							ProbabilityValue => Isolette_Constants::AlarmSoundFailureRateValue;] 
							applies to failed, HSFail.HeaterError;
		**};
	end Heat_Source;

	device implementation Heat_Source.impl
	end Heat_Source.impl;

	device Alarm_Device
		features
			alarm_control: in event data port Isolette_Data_Model::On_Off;
			alarm_sound: out feature Isolette_Data_Model::Alarm_Sound;
			network: requires bus access PCI;
		flows
			makeSound: flow path alarm_control -> alarm_sound;
		properties
			Dispatch_Protocol => Aperiodic; 
			Latency => 50 ms .. 60 ms applies to makeSound;
		annex EMV2 {**
			use types IsoletteEM;
			use behavior IsoletteEM::FailStop;
			error propagations
				alarm_sound: out propagation {AlarmError}; --{ServiceOmission, ServiceCommission};
				-- may deliver no sound or erroneous sound
				network: in propagation {NetworkError};
				-- XXX no propagation from alarm to bus (electrical isolation)
				flows
					alarmfails: error source alarm_sound{AlarmError};
			end propagations;
			properties
				EMV2::OccurrenceDistribution => [
							ProbabilityValue => Isolette_Constants::AlarmSoundFailureRateValue;]
							applies to failed, alarmfails.AlarmError;
		**};
	end Alarm_Device;

	device implementation Alarm_Device.impl
	end Alarm_Device.impl;

	device TouchScreen
		features
			current_temp: in data port Isolette_Data_Model::DisplayTemp;
			lower_desired_temp: in data port Isolette_Data_Model::ValidFullDegreeFahrenheit;
			upper_desired_temp: in data port Isolette_Data_Model::ValidFullDegreeFahrenheit;
			lower_alarm_temp: in data port Isolette_Data_Model::ValidFullDegreeFahrenheit;
			upper_alarm_temp: in data port Isolette_Data_Model::ValidFullDegreeFahrenheit;
			touch_key_command: out event data port Isolette_Data_Model::Interface_Command;
			command_error: in event data port Isolette_Data_Model::Interface_Command;
			visual_info: out feature Isolette_Data_Model::Interface_Display;
			operator_input: in feature Isolette_Data_Model::Interface_Touch;
			network: requires bus access PCI;
		flows
			showinfo: flow path lower_desired_temp ->visual_info;
			doCommand: flow path operator_input ->touch_key_command;
		properties
			Dispatch_Protocol => Aperiodic; 
			Latency => 75 ms .. 85 ms applies to showinfo;
			Latency => 65 ms .. 75 ms applies to doCommand;
		annex EMV2 {**
			use types IsoletteEM;
			use behavior IsoletteEM::FailStop;
			error propagations
				visual_info: out propagation {DisplayError};
				touch_key_command: out propagation {InterfaceError};
				network: in propagation {NetworkError};
				-- XXX no propagation from alarm to bus (electrical isolation)
				flows
					touchscreenfails: error source touch_key_command{InterfaceError};
					displayfails: error source visual_info{DisplayError};
			end propagations;
			properties
				EMV2::OccurrenceDistribution => [
							ProbabilityValue => Isolette_Constants::InterfaceFailureRateValue;]
							applies to failed, displayfails, touch_key_command;
		**};
	end TouchScreen;

	device implementation TouchScreen.impl
	end TouchScreen.impl;
	
	bus PCI
		features
			power: in feature;
		annex EMV2 {**
			use types IsoletteEM;
			use behavior IsoletteEM::FailStop;
			error propagations
				bindings: out propagation {NetworkError};
				power: in propagation {PowerSupplyError};
				flows
					p2n: error path power{PowerSupplyError} -> bindings{NetworkError};
					busfail: error source bindings{NetworkError};
			end propagations;
			properties
				EMV2::OccurrenceDistribution => [
							ProbabilityValue => Isolette_Constants::BusFailureRateValue;]
							applies to failed,busfail, bindings.NetworkError;
	EMV2::hazards => 
	([	crossreference => "1.1.3";
		failure => "Loss of automated flight guidance";
		phases => ("all");
		severity => ARP4761::Major;
		likelihood => ARP4761::Frequent;
		description => "Loss of automated flight guidance leads to manual flight control.";
		comment => "This becomes major hazard in critical flight situations.";
			])
			applies to bindings.NetworkError;
		**};
	end PCI;
	
	processor CPU
		features
			power: in feature;
			network: requires bus access PCI;
		annex EMV2 {**
			use types IsoletteEM;
			use behavior IsoletteEM::FailStop;
			error propagations
				bindings: out propagation {CPUError};
				power: in propagation {PowerSupplyError};
				flows
					p2c: error path power{PowerSupplyError} -> bindings{CPUError};
					cpufail: error source bindings{CPUError};
			end propagations;
			properties
				EMV2::OccurrenceDistribution => [
							ProbabilityValue => Isolette_Constants::CPUFailureRateValue;]
							applies to failed,cpufail, bindings.CPUError;
		**};
	end CPU;
	
	system Platform
		features
			network: provides bus access PCI;
			power: in feature;
	end Platform;
	
	system implementation Platform.singleCPU
		subcomponents
			cpu1: processor CPU;
			nw: bus PCI;
		connections
			c2n: bus access cpu1.network <-> nw;
			n2ext: bus access nw <-> network;
			p2cpu1: feature power -> cpu1.power;
			p2network: feature power -> nw.power;
	end Platform.singleCPU;
	
	system implementation Platform.DualCPU extends Platform.singleCPU
		subcomponents
			cpu2: processor CPU;
		connections
			c22n: bus access cpu2.network <-> nw;
			p2cpu2: feature power -> cpu2.power;
	end Platform.DualCPU;
	
	
	device PowerSupply
		features
			power : out feature;
		annex EMV2 {**
			use types IsoletteEM;
			use behavior IsoletteEM::FailStop;
			error propagations
				power: out propagation {PowerSupplyError};
			flows
					nopower: error source power {PowerSupplyError};
			end propagations;
			properties
				EMV2::OccurrenceDistribution => [
							ProbabilityValue => Isolette_Constants::PowerSupplyFailureRateValue;]
							applies to failed, nopower.PowerSupplyError;
		**};
	end PowerSupply;


end Devices;