package RegulateTemperature
public
	with Isolette_Data_Model, Isolette_Constants;

	with Isolette_Properties;

	with Data_Model;

-- ===========================================================================================================
--
--   R e g u l a t e    T e m p e r a t u r e    P r o c e s s
--
-- @description process that holds threads that regulate air temperature
-- A.5.1 REGULATE TEMPERATURE FUNCTION
-- 
-- ===========================================================================================================
	abstract Regulate_Temperature
		features
				-- ===== INPUTs (monitored variables) ...based in part on Figure A.2 and Table A.5 
				--  desired temperature range from operator interface 	
				-- we use the type system to ensure value range on desired temp	
			lower_desired_temp: in data port Isolette_Data_Model::lower_desired_temperature;
			upper_desired_temp: in data port Isolette_Data_Model::upper_desired_temperature;
					--  actual temperature from temp sensor
			current_temp: in data port Isolette_Data_Model::MeasuredTemp{ Isolette_Properties::Validity => Valid;};
			
			goStandby: in event port;
					-- ===== OUTPUTs (controlled variables)  ...based in part on Figure A.2 and Table A.6
					-- status of regulate temperature function as reported to operator interface
			self_check_status: out data port Isolette_Data_Model::Status;
					-- actuation command to heater
			heat_control: out data port Isolette_Data_Model::On_Off;
		flows
			regulate: flow path current_temp -> heat_control { Latency => 10 ms .. 1 sec;};
		modes
			normal : initial mode;
			standby: mode;
			stdby: normal -[goStandby]-> standby;
		properties
			Dispatch_Protocol => Periodic;
			Period => Isolette_Constants::ProcessingRate;
		annex EMV2 {**
			use types ErrorLibrary, isoletteEM;
			use behavior IsoletteEM::FailStop;
			error propagations
				current_temp: in propagation {ItemOmission, ServiceOmission};
				heat_control: out propagation {RegulatorError};
			flows
				missingSensorReading : error sink current_temp{ItemOmission} ; -- Thermo does detect missing TS readings
				noSensorReadings : error path current_temp{ServiceOmission} -> heat_control{RegulatorError}; -- Thermo does not detect missing TS readings
				regulatorFails : error source heat_control{RegulatorError}; -- Internal regulator error
			end propagations;
  		properties
  	      EMV2::OccurrenceDistribution => [ProbabilityValue => Isolette_Constants::TemperatureRegulatorFailureRateValue; ]
      	applies to failed, regulatorFails.RegulatorError;      
		**};
	end Regulate_Temperature;
	
	process Regulate_Temperature_Pr extends Regulate_Temperature
		annex EMV2 {**
			use types  isoletteEM;
			
			error propagations
				processor: in propagation {CPUError};
			flows
				badCPU: error path processor {CPUError} -> heat_control {RegulatorError};
			end propagations;
		**};
	end Regulate_Temperature_Pr;

--@description process implementation that holds threads that regulate air temperature
	process implementation Regulate_Temperature_Pr.impl
		subcomponents
--thread to manage the interactions between with operator interface and the rest of the regulator process
			self_check_regulator: thread Self_Check_Regulator.impl in modes (normal);
-- thread to manage the heat source.  Receives the desired range, current determine, and determines whether or not to
--send an on/off command to the heat source
			manage_heat_source: thread Manage_Heat_Source.impl in modes (normal);
		connections
				-- ==== INPUT INTERFACE values to internal components ==== 		
				-- send incoming desired temperature range to regulator interface manager
			rudt: port upper_desired_temp -> manage_heat_source.upper_desired_temp;
			rldt: port lower_desired_temp -> manage_heat_source.lower_desired_temp;
			ctmhs: port current_temp -> manage_heat_source.current_temp;
					-- output regulator subsystem status to operator interface  
			rrs: port self_check_regulator.regulator_status -> self_check_status;
					-- output on/off command to heat source
			rhc: port manage_heat_source.heat_control -> heat_control;
		flows
			regulate: flow path current_temp -> ctmhs -> manage_heat_source.regulate -> rhc -> heat_control;
	end Regulate_Temperature_Pr.impl;

-- ===========================================================================================================
--
--   M a n a g e    R e g u l a t o r   I n t e r f a c e   T h r e a d
--
--  
-- A.5.1.1 Manage Regulator Interface Function
-- 
-- ===========================================================================================================
	thread Self_Check_Regulator
		features
				-- overall status of regulator subsystem sent to operator interface
			regulator_status: out data port Isolette_Data_Model::Status;
		properties
			Dispatch_Protocol => Periodic;
			Period => Isolette_Constants::ThreadPeriod;
			Initialize_Entrypoint => classifier(Init_Self_Checker);
			Compute_Entrypoint => classifier(Compute_Self_Checker);
	end Self_Check_Regulator;

	thread implementation Self_Check_Regulator.impl
	end Self_Check_Regulator.impl;
	
	subprogram Init_Self_Checker
	end Init_Self_Checker;
	subprogram Compute_Self_Checker
	end Compute_Self_Checker;


-- ===========================================================================================================
--
--   M a n a g e    H e a t    S o u r c e     T h r e a d
--
--  
--    A.5.1.3 Manage Heat Source Function
-- 
-- ===========================================================================================================
	thread Manage_Heat_Source
		features
-- ======== INPUTS =======
-- current temperature (from temp sensor)
			current_temp: in data port Isolette_Data_Model::MeasuredTemp {Isolette_Properties::Validity => valid;};
-- lowest and upper bound of desired temperature range
			lower_desired_temp: in data port Isolette_Data_Model::lower_desired_temperature;
			upper_desired_temp: in data port Isolette_Data_Model::upper_desired_temperature;
-- ======== OUTPUTS =======
-- command to turn heater on/off (actuation command)
			heat_control: out data port Isolette_Data_Model::On_Off;
		flows
			regulate: flow path current_temp -> heat_control;
		properties
			Dispatch_Protocol => Periodic;
			Period => Isolette_Constants::ThreadPeriod;
			Latency => 10 ms .. 10 ms applies to regulate;
			Initialize_Entrypoint => classifier(Init_MHS);
			Compute_Entrypoint => classifier(Compute_MHS);
	end Manage_Heat_Source;

	thread implementation Manage_Heat_Source.impl
		subcomponents
			desired_temp_lower_bound_var : data Isolette_Data_Model::ValidFullDegreeFahrenheit
			{ Data_Model::Integer_Range => 96 .. 101;};
			desired_temp_upper_bound_var : data Isolette_Data_Model::ValidFullDegreeFahrenheit
			{ Data_Model::Integer_Range => 97 .. 102;};
	end Manage_Heat_Source.impl;
	
	subprogram Init_MHS
	end Init_MHS;
	subprogram Compute_MHS
	end Compute_MHS;

end RegulateTemperature;