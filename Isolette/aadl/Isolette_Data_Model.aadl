--Building_Variables.aadl
package Isolette_Data_Model
public
	with Isolette_Properties, Data_Model;

-- ==============
-- Physical entities
-- ==============
--@description heat emitted by source to warm air	
	abstract Heat
	end Heat;

--@description data that flows between operator and control panel
	abstract Interface_Touch
	end Interface_Touch;

	abstract Interface_Display
		properties
			Data_Model::Integer_Range => 68 .. 105;
			Data_Model::Measurement_Unit => "Fahrenheit";
			Isolette_Properties::Temperature_Accuracy => 1.0 Fahrenheit;
	end Interface_Display;

--@description of alarm sound
	abstract Alarm_Sound
	end Alarm_Sound;

--@description warming of air by heat source, or of infant by air	
	abstract Air_Exposure
	end Air_Exposure;

	abstract PhysicalTemp
	end PhysicalTemp;

-- ===============
-- Discrete data entities
-- ===============

	data DiscreteTemp
	end DiscreteTemp;

	data MeasuredTemp extends DiscreteTemp
		properties
			Data_Model::Real_Range => 68.0 .. 105.0;
			Data_Model::Measurement_Unit => "Fahrenheit"; -- generic string representation. Easier to process any unit
			Isolette_Properties::Temperature_Accuracy => 0.1 Fahrenheit;
	end MeasuredTemp;

	data FullDegreeFTemp extends DiscreteTemp
		properties
			Data_Model::Measurement_Unit => "Fahrenheit";
			Isolette_Properties::Temperature_Accuracy => 1.0 Fahrenheit;
	end FullDegreeFTemp;


	data ValidFullDegreeFahrenheit extends FullDegreeFTemp
		properties
			Isolette_Properties::Validity => valid;
	end ValidFullDegreeFahrenheit;
	

	data DisplayTemp extends ValidFullDegreeFahrenheit
		properties
			Data_Model::Integer_Range => 68 .. 105; 
	end DisplayTemp;
	

-- bound limits encoded in data type for use within Thermostat
-- this way the type system ensure the specified range rather than a validator.
-- at the Isolette level we use the more generic type with explicit value range specifications
	data lower_desired_temperature extends ValidFullDegreeFahrenheit
		properties
			Data_Model::Integer_Range => 97 .. 99;
	end lower_desired_temperature;

	data upper_desired_temperature extends ValidFullDegreeFahrenheit
		properties
			Data_Model::Integer_Range => 98 .. 100;
	end upper_desired_temperature;


--range of Lower alarm Temperature  
	data lower_alarm_temperature extends ValidFullDegreeFahrenheit
		properties
			Data_Model::Integer_Range => 93 .. 98;
	end lower_alarm_temperature;


--range of Upper alarm Temperature  
	data upper_alarm_temperature extends ValidFullDegreeFahrenheit
		properties
			Data_Model::Integer_Range => 99 .. 103;
	end upper_alarm_temperature;
	

	data On_Off
		properties
			Data_Model::Data_Representation => Enum;
	end On_Off;
	
	data Interface_Command
		-- increment/decrement desired/alarm lower/upper bound
		-- turn on/off
	end Interface_Command;

--Regulator and Monitor Status

	data Status
		properties
			Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("Ok", "Failed");
	end Status;

	data Isolette_Status
		properties
			Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("Normal", "Failed");
	end Isolette_Status;

 
end Isolette_Data_Model;