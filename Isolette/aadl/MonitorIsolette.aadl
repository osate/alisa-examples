package MonitorIsolette
public
	with Isolette_Data_Model;

	with Data_Model;

	with Isolette_Properties;

	abstract Monitor_Isolette
		features
				-- ===== INPUTs (monitored variables) ...based in part on Figure A.2 and Table A.5 
				-- value of current temp (with status flag) from air temp sensor
			current_temp: in data port Isolette_Data_Model::MeasuredTemp;
					-- operator-specific alarm range for temperature
					-- we use the type system to ensure value range on desired temp	
			lower_alarm_temp: in data port Isolette_Data_Model::lower_alarm_temperature;
			upper_alarm_temp: in data port Isolette_Data_Model::upper_alarm_temperature;
					-- monitor regulator
			regulator_selfcheck_status: in data port Isolette_Data_Model::Status;
			monitor_heat_control: in data port Isolette_Data_Model::On_Off;
					-- ===== OUTPUTs (controlled variables)  ...based in part on Figure A.2 and Table A.6
					-- control signal (on/off) to alarm component 
			isolette_status: out data port Isolette_Data_Model::Isolette_Status;
					-- the monitor validates current temp reading
			valid_current_temp: out data port Isolette_Data_Model::MeasuredTemp {
						Isolette_Properties::Validity => Valid;};
			alarm_control: out data port Isolette_Data_Model::On_Off;
			go_Standby: out event port ; 
		flows
			detectTempOOR: flow path current_temp -> alarm_control {Latency => 10ms .. 1 sec;}; -- 1 sec due to periodic sampling
			validateCT: flow path current_temp -> valid_current_temp {Latency => 10ms .. 1 sec;}; -- 1 sec due to periodic sampling
		properties
			Dispatch_Protocol => Periodic;
			Period => Isolette_Constants::ProcessingRate;
		annex EMV2 {**
			use types ErrorLibrary, isoletteEM;
			use behavior IsoletteEM::FailStop;
			
			error propagations
				current_temp: in propagation {SensorError, OutOfRange, OutOfCalibration};
				monitor_heat_control: in propagation {RegulatorError};
				alarm_control: out propagation {MonitorError};
				valid_current_temp: out propagation {ItemOmission};
			flows
				badMonitor: error source alarm_control {MonitorError};
				badTemp: error path current_temp {OutOfRange, SensorError} -> alarm_control {MonitorError};
			end propagations;
			
			component error behavior
			propagations
				reportfailures: working -[current_temp {SensorError, OutOfRange}]-> alarm_control {noerror};
				alarmfailures: failed -[current_temp {SensorError, OutOfRange}]-> alarm_control {MonitorError};
			end component;
			
			properties
				EMV2::OccurrenceDistribution => [
							ProbabilityValue => Isolette_Constants::IsoletteMonitorFailureRateValue;] applies to failed, badMonitor.MonitorError, fail;
		**};
	end Monitor_Isolette;

	process Monitor_Isolette_pr extends Monitor_Isolette
		annex EMV2 {**
			use types isoletteEM;
			
			error propagations
				processor: in propagation {CPUError};
			flows
				badCPU: error path processor {CPUError} -> alarm_control {MonitorError};
			end propagations;
			
			component error behavior
			propagations
				cpueffect: all -[processor {CPUError}]-> alarm_control {MonitorError};
			end component;
		**};
	end Monitor_Isolette_pr;

	process implementation Monitor_Isolette_pr.impl
		-- thread to manage the interactions between with operator interface and the rest
		-- of the monitor process
		subcomponents
				--thread for manage alarm implementation
			manage_alarm: thread Manage_Alarm.impl;
					--thread for monitor interface implementation
			manage_isolette_status: thread Manage_Isolette_Status.impl;
					--thread for monitor mode implementation
			validate_current_temp: thread Validate_Temp.impl;
		connections
				-- ==== INPUT INTERFACE values to internal components ====
				-- send incoming alarm temperature range to monitor interface manager
			muat: port upper_alarm_temp -> manage_alarm.upper_alarm_temp;
			mlat: port lower_alarm_temp -> manage_alarm.lower_alarm_temp;
					-- send incoming current temperature (with status value)
					--   ...to interface manager
			mctv: port current_temp -> validate_current_temp.current_temp;
			vcta: port validate_current_temp.valid_current_temp -> valid_current_temp;
					-- ==== OUTPUT INTERFACE values from internal components ==== 
					-- send alarm actuation command (on/off) 
			malrm: port manage_alarm.alarm_control -> alarm_control;
					-- send status of monitor subsystem  to operator interface
			mis: port manage_isolette_status.isolette_status -> isolette_status;
			mhc: port monitor_heat_control -> manage_isolette_status.monitor_heat_control;
			mac: port manage_alarm.alarm_control -> manage_isolette_status.monitor_alarm_control;
			vctma: port validate_current_temp.valid_current_temp -> manage_alarm.current_temp;
			vsmi: port validate_current_temp.temp_validation_status -> manage_isolette_status.temp_validation_status;
			rscksmi: port regulator_selfcheck_status -> manage_isolette_status.regulator_selfcheck_status;
			gostdby: port manage_isolette_status.go_Standby -> go_Standby;
	end Monitor_Isolette_pr.impl;

-- ===========================================================================================================
--
--   M a n a g e    R e g u l a t o r   I n t e r f a c e   T h r e a d
--
--  
-- A.5.2.1 Manage Monitor Interface Function
-- 
-- ===========================================================================================================
	thread Manage_Isolette_Status
		features
			regulator_selfcheck_status: in data port Isolette_Data_Model::Status;
			monitor_heat_control: in data port Isolette_Data_Model::On_Off;
			monitor_alarm_control: in data port Isolette_Data_Model::On_Off;
			temp_validation_status: in data port Isolette_Data_Model::Status;
					-- overall status of monitor subsystem sent to operator interface
			isolette_status: out data port Isolette_Data_Model::Isolette_Status; -- alarm_control (Omission), internal selfcheck
			go_Standby: out event port;
		properties --properties of monitor interface
			Dispatch_Protocol => Periodic;
			Period => Isolette_Constants::ThreadPeriod;
	end Manage_Isolette_Status;

	thread implementation Manage_Isolette_Status.impl
	end Manage_Isolette_Status.impl;


-- ===========================================================================================================
--
--   M a n a g e    A l a r m    T h r e a d
--
--  
--    A.5.2.3 Manage Alarm Function
-- 
-- ===========================================================================================================
--A.5.2.3 Manage Alarm Function
--The Manage Alarm Function turns the Alarm Control on when the Current
--Temperature of the Room falls below or rises above the Alarm Temperature Range.
	thread Manage_Alarm
		features
				-- ======== INPUTS =======
				-- current temperature (from temp sensor)
			current_temp: in data port Isolette_Data_Model::MeasuredTemp;
					-- lowest and upper bound of operator specified alarm temperature range
			lower_alarm_temp: in data port Isolette_Data_Model::lower_alarm_temperature;
			upper_alarm_temp: in data port Isolette_Data_Model::upper_alarm_temperature;
					-- ======== OUTPUTS =======
-- command to turn alarm on/off (actuation command) sent repeatedly 
			alarm_control: out data port Isolette_Data_Model::On_Off;
		properties
			Dispatch_Protocol => Periodic;
			Period => Isolette_Constants::ThreadPeriod;
	end Manage_Alarm;

	thread implementation Manage_Alarm.impl
		subcomponents
			alarm_temp_lower_bound_var: data Isolette_Data_Model::ValidFullDegreeFahrenheit {
						Data_Model::Integer_Range => 96 .. 101;};
			alarm_temp_upper_bound_var: data Isolette_Data_Model::ValidFullDegreeFahrenheit {
						Data_Model::Integer_Range => 97 .. 102;};
	end Manage_Alarm.impl;

	thread Validate_Temp
		features
				-- ======== INPUTS =======
				-- current temperature (from temp sensor)
			current_temp: in data port Isolette_Data_Model::MeasuredTemp;
			valid_current_temp: out data port Isolette_Data_Model::MeasuredTemp {
						Isolette_Properties::Validity => Valid;};
			temp_validation_status: out data port Isolette_Data_Model::Status;
		properties
			Dispatch_Protocol => Periodic;
			Period => Isolette_Constants::ThreadPeriod;
	end Validate_Temp;

	thread implementation Validate_Temp.impl
	end Validate_Temp.impl;
end MonitorIsolette;