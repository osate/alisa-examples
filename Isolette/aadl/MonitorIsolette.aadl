package MonitorIsolette
public
	with Isolette_Data_Model;

	with Data_Model;

	with Isolette_Properties;

	abstract Monitor_Isolette
		features
				-- ===== INPUTs (monitored variables) ...based in part on Figure A.2 and Table A.5 
				-- value of current temp (with status flag) from air temp sensor
			current_temp: in data port Isolette_Data_Model::MeasuredTemp;
					-- operator-specific alarm range for temperature
				-- we use the type system to ensure value range on desired temp	
			lower_alarm_temp: in data port Isolette_Data_Model::lower_alarm_temperature;
			upper_alarm_temp: in data port Isolette_Data_Model::upper_alarm_temperature;
					-- ===== OUTPUTs (controlled variables)  ...based in part on Figure A.2 and Table A.6
					-- control signal (on/off) to alarm component 
			alarm_control: out event data port Isolette_Data_Model::On_Off;
					-- enumerated type describing status/mode of monitor (Init, On/operating, or Failed)
			monitor_status: out data port Isolette_Data_Model::Status;
			regulator_status: out data port Isolette_Data_Model::Status;
			sensor_status: out data port Isolette_Data_Model::Status;
				-- the monitor validates current temp reading
			valid_current_temp: out data port Isolette_Data_Model::MeasuredTemp {
						Isolette_Properties::Validity => Valid;};
		flows
			detectTempOOR: flow path current_temp -> alarm_control {Latency => 10 ms .. 1 sec;}; -- 1 sec due to periodic sampling
		properties
			Dispatch_Protocol => Periodic;
			Period => Isolette_Constants::ProcessingRate;
annex EMV2 
  {**
    use types ErrorLibrary, isoletteEM;
    use behavior IsoletteEM::FailStop;
  	error propagations
  		current_temp: in propagation {SensorError};
  		alarm_control: out propagation {MonitorError};
  	flows
  		badMonitor: error source alarm_control {MonitorError};
  		badTemp: error path current_temp{SensorError} -> alarm_control {MonitorError}; 
  end propagations;
  component error behavior
  propagations
  	working -[current_temp{SensorError}]-> alarm_control{noerror};
  	failed -[current_temp{SensorError}]-> alarm_control{MonitorError};
  end component;
  properties
      EMV2::OccurrenceDistribution => [ProbabilityValue =>  Isolette_Constants::IsoletteMonitorFailureRateValue ;] 
   	applies to failed, badMonitor.MonitorError, fail;      
  **};
	end Monitor_Isolette;

	process Monitor_Isolette_pr extends Monitor_Isolette
	end Monitor_Isolette_pr;

	process implementation Monitor_Isolette_pr.impl
		-- thread to manage the interactions between with operator interface and the rest
		-- of the monitor process
		subcomponents
				--thread for manage alarm implementation
			manage_alarm: thread Manage_Alarm.impl;
					--thread for monitor interface implementation
			manage_monitor_interface: thread Manage_Monitor_Interface.impl;
					--thread for monitor mode implementation
			manage_monitor_mode: thread Manage_Monitor_Mode.impl;
		connections
				-- ==== INPUT INTERFACE values to internal components ====
				-- send incoming alarm temperature range to monitor interface manager
			muat: port upper_alarm_temp -> manage_monitor_interface.upper_alarm_temp;
			mlat: port lower_alarm_temp -> manage_monitor_interface.lower_alarm_temp;
					-- send incoming current temperature (with status value)
					--   ...to interface manager
			mcti: port current_temp -> manage_monitor_interface.current_temp;
					--   ...to alarm manager (controls alarm)
			mcta: port current_temp -> manage_alarm.current_temp;
					--   ...to mode manager
			mctm: port current_temp -> manage_monitor_mode.current_temp;
					-- ==== OUTPUT INTERFACE values from internal components ==== 
					-- send alarm actuation command (on/off) 
			malrm: port manage_alarm.alarm_control -> alarm_control;
					-- send status of monitor subsystem  to operator interface
			mms: port manage_monitor_interface.monitor_status -> monitor_status;
					-- ==== INTERNAL communication ====
					-- send monitor mode from mode manager 
					--  ... to interface manager
			mmmi: port manage_monitor_mode.monitor_mode -> manage_monitor_interface.monitor_mode;
					--  ... to alarm manager
			mmma: port manage_monitor_mode.monitor_mode -> manage_alarm.monitor_mode;
					-- send regulator interface failure to mode manager
			intff: port manage_monitor_interface.interface_failure -> manage_monitor_mode.interface_failure;
	end Monitor_Isolette_pr.impl;

-- ===========================================================================================================
--
--   M a n a g e    R e g u l a t o r   I n t e r f a c e   T h r e a d
--
--  
-- A.5.2.1 Manage Monitor Interface Function
-- 
-- ===========================================================================================================
	thread Manage_Monitor_Interface
		features
-- ==== INPUTS ====	(see Figure A.5)
				--  operator specified alarm range
			lower_alarm_temp: in data port Isolette_Data_Model::lower_alarm_temperature;
			upper_alarm_temp: in data port Isolette_Data_Model::upper_alarm_temperature;
					-- current temperature from temp sensor
			current_temp: in data port Isolette_Data_Model::MeasuredTemp;
					-- current mode of monitor subsystem (init, normal or failed)
			monitor_mode: in data port Isolette_Data_Model::Monitor_Mode;
					-- overall status of monitor subsystem sent to operator interface
			monitor_status: out data port Isolette_Data_Model::Status;
					-- flag indicating improper inputs; sent to determine overall subsystem mode 
			interface_failure: out data port Isolette_Data_Model::Failure_Flag;
		properties --properties of monitor interface
				--Dispatch_Protocol => Timed;				--Dispatch_Protocol?
			Dispatch_Protocol => Periodic; -- jab switched to periodic
			Period => Isolette_Constants::ThreadPeriod;
	end Manage_Monitor_Interface;

	thread implementation Manage_Monitor_Interface.impl
		subcomponents
			alarm_temp_lower_bound_var: data Isolette_Data_Model::ValidFullDegreeFahrenheit {
						Data_Model::Integer_Range => 96 .. 101;};
			alarm_temp_upper_bound_var: data Isolette_Data_Model::ValidFullDegreeFahrenheit {
						Data_Model::Integer_Range => 97 .. 102;};
	end Manage_Monitor_Interface.impl;

-- ===========================================================================================================
--
--   M a n a g e    R e g u l a t o r   M o d e   T h r e a d
--
--  
--   A.5.2.2 Manage Regulator Mode Function
-- 
-- ===========================================================================================================
--A.5.2.2 Manage Monitor Mode Function
	thread Manage_Monitor_Mode
		features
				-- ==== INPUTS ========		
				-- current temperature from temp sensor
			current_temp: in data port Isolette_Data_Model::MeasuredTemp;
					-- status of operator interface interactions
			interface_failure: in data port Isolette_Data_Model::Failure_Flag;
					-- in case of internal failure, a flag is raised
			internal_failure: in data port Isolette_Data_Model::Failure_Flag;
					-- ==== OUTPUTS ========		
					-- mode of regulator (Init, Normal, Failed)   
			monitor_mode: out data port Isolette_Data_Model::Monitor_Mode;
		properties
			Dispatch_Protocol => Periodic; -- jab switched to Periodic
			Period => Isolette_Constants::ThreadPeriod;
	end Manage_Monitor_Mode;

	thread implementation Manage_Monitor_Mode.impl
	end Manage_Monitor_Mode.impl;

-- ===========================================================================================================
--
--   M a n a g e    A l a r m    T h r e a d
--
--  
--    A.5.2.3 Manage Alarm Function
-- 
-- ===========================================================================================================
--A.5.2.3 Manage Alarm Function
--The Manage Alarm Function turns the Alarm Control on when the Current
--Temperature of the Room falls below or rises above the Alarm Temperature Range.
	thread Manage_Alarm
		features
				-- ======== INPUTS =======
				-- current temperature (from temp sensor)
			current_temp: in data port Isolette_Data_Model::MeasuredTemp;
					-- lowest and upper bound of operator specified alarm temperature range
			lower_alarm_temp: in data port Isolette_Data_Model::lower_alarm_temperature;
			upper_alarm_temp: in data port Isolette_Data_Model::upper_alarm_temperature;
					-- subsystem mode
			monitor_mode: in data port Isolette_Data_Model::Monitor_Mode;
					-- ======== OUTPUTS =======
-- command to turn alarm on/off (actuation command)  
			alarm_control: out data port Isolette_Data_Model::On_Off;
		properties
			Dispatch_Protocol => Periodic;
			Period => Isolette_Constants::ThreadPeriod;
	end Manage_Alarm;

	thread implementation Manage_Alarm.impl
	end Manage_Alarm.impl;
end MonitorIsolette;