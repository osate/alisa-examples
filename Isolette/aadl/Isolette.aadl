-- Isolette.aadl
--
-- =====================================================================================================================
--
--   I s o l e t t e     P a c k a g e 
-- 
--
--   Top-level system specification including
--
--      - thermostat + temp sensor and heater hardware components
--      - system boundary capturing interactions with the environment
--
-- =====================================================================================================================
 
-- authors Brian Larson, John Hatcliff, Peter Feiler


package Isolette
  public
	with MonitorIsolette, -- subcomponent of the Room thermostat that monitors turns heat source on/off
-- as necessary to maintain desired temperature
RegulateTemperature, -- physical entities in Room system including temperature sensor and heat source
Devices, -- entities used to monitor environment external to Room including infant, nurse, air 
Isolette_Data_Model, -- import type definitions used in Isolette
OperatorInterface;

	with Isolette_Properties;

	system isolette
		features
				-- models (abstractly) warming of air inside of Isolette enclosure
			heat_out: out feature Isolette_Data_Model::Heat;
					-- models (abstractly) commands given by the operator to Isolette operator interface
			operator_input: in feature Isolette_Data_Model::Interface_Touch;
					-- models (abstractly) visual information presented to the operator on Isolette operator interface
			operator_visual_information: out feature Isolette_Data_Model::Interface_Display;
					-- models (abstraction) audio information presented to the operator on Isolette operator interface
			alarm_sound: out feature Isolette_Data_Model::Alarm_Sound;
					-- models (abstractly) the sensing of the physical air temperature
			air_temperature: in feature Isolette_Data_Model::PhysicalTemp;
		flows
			raise_alarm: flow source alarm_sound {Latency => 15 sec .. 15 sec;};
			command_response: flow path operator_input -> operator_visual_information {Latency => 500ms .. 500ms;};
			extreme_air_alarm: flow path air_temperature -> alarm_sound {Latency => 15 sec .. 15 sec;};
			heat_control: flow path air_temperature -> heat_out{Latency => 6 sec .. 6 sec;};
		properties
			Isolette_Properties::Temperature_Change_Rate => 1.0 Fdeg_Minute;
		annex EMV2 {**
			use types ErrorLibrary, IsoletteEM;
			use behavior IsoletteEM::FailStop;
			
			error propagations
				infantExposure: out propagation {DangerousInfantExposure};
				heat_out: out propagation {HeaterError};
				operator_visual_information: out propagation {DisplayError};
			end propagations;
			
			propagation paths
				infantExposure: propagation point;
			end paths;
			
			properties
				EMV2::OccurrenceDistribution => [
					ProbabilityValue => Isolette_Constants::ExpectedIsoletteFailureRateValue;] applies to failed, infantExposure.DangerousInfantExposure;
		**};
	end isolette;

-- -----------------------------------------------------------------------------
--
--   I s o l e t t e     S y s t e m    I m p l e m e n t a t i o n 
-- 
--
--   Top-level system structure capturing 
--   thermostat + temp sensor and heater hardware components
--
-- -----------------------------------------------------------------------------
	system implementation isolette.SingleSensor_Functional
-- internal architecture of Isolette 
--
-- It is a single sensor architecture
--
-- Functional shows one level down. Is used to analyze responee time of nurse to alarm.
-- EmbeddedSW refines the model one level of detail for repeated end to end flow latency analysis
--
--  Note that in contrast to the "boundary" implied by Figure A.1, we have not chosen to model the
--  notion of "Air" as "inside" the system boundary.  Our rationale is that we are only including
--  in the system boundary the components that the manufacturer is responsible for and that will
--  be addressed in quality management and the primary risk management activities.
--
		subcomponents
			temperature_regulator: abstract RegulateTemperature::Regulate_Temperature;
			isolette_monitor: abstract MonitorIsolette::Monitor_Isolette;
			temperature_sensor: device Devices::temperature_sensor;
			heat_source: device Devices::heat_source;
			operator_interface: system OperatorInterface::operator_interface;
		connections
				-- ==== INPUT interface to internal components ==== 	    
				-- commands from operator flow into the operator interface
			oioc: feature operator_input -> operator_interface.operator_input;
					-- the environment air temperature (abstract/physical) flows into the temp sensor
			a2ts: feature air_temperature -> temperature_sensor.air;
					-- ==== OUTPUT interface values from internal components ==== 
					-- information (audio and visual) flows from the operator interface to the operator
			oiovi: feature operator_interface.operator_visual_information -> operator_visual_information;
			oioa: feature operator_interface.alarm_sound -> alarm_sound;
					-- heat source's (abstract) output is increase in physical air temperature
			hs: feature heat_source.heat_out -> heat_out;
					-- ==== INTERNAL communication ==== 
					-- thermostat controls turns the heat source off and on  
			hc: port temperature_regulator.heat_control -> heat_source.heat_control;
					-- operator interface communicates desired temperature to thermostat
			ldt: port operator_interface.lower_desired_temp -> temperature_regulator.lower_desired_temp {
				Classifier_Matching_Rule => Subset;};
			udt: port operator_interface.upper_desired_temp -> temperature_regulator.upper_desired_temp {
				Classifier_Matching_Rule => Subset;};
			ctm: port temperature_sensor.current_temp -> isolette_monitor.current_temp {
				Classifier_Matching_Rule => Subset;};
			ctvr: port isolette_monitor.valid_current_temp -> temperature_regulator.current_temp;
					-- operator interface communicates alarm temperature to thermostat
			lat: port operator_interface.lower_alarm_temp -> isolette_monitor.lower_alarm_temp {
				Classifier_Matching_Rule => Subset;};
			uat: port operator_interface.upper_alarm_temp -> isolette_monitor.upper_alarm_temp {
				Classifier_Matching_Rule => Subset;};
					-- monitor regulator
			rhcmi: port temperature_regulator.heat_control -> isolette_monitor.monitor_heat_control;
			rscksmi: port temperature_regulator.self_check_status -> isolette_monitor.regulator_selfcheck_status;
					-- monitor communicates regulator status to display on operator interface
			rs: port isolette_monitor.isolette_status -> operator_interface.isolette_status;
					-- thermostat communicates current sensed temperature to display on operator interface
			dt: port isolette_monitor.valid_current_temp -> operator_interface.valid_current_temp{ Timing => Immediate;};
					-- thermostat communicates alarm information to display on operator interface
			al: port isolette_monitor.alarm_control -> operator_interface.alarm_control;
			triggermodeswitch: port isolette_monitor.go_Standby -> temperature_regulator.goStandby;
		flows
			command_response: flow path operator_input -> oioc -> operator_interface.processCommand -> oiovi -> operator_visual_information;
			raise_alarm: flow source temperature_sensor -> ctm -> isolette_monitor.detectTempOOR -> al -> operator_interface.enableAlarmSound -> oioa -> alarm_sound;
			extreme_air_alarm: flow path air_temperature -> a2ts -> temperature_sensor.air_temp_reading -> ctm -> isolette_monitor.detectTempOOR -> al -> operator_interface.enableAlarmSound -> oioa -> alarm_sound;
			heat_control: flow path air_temperature -> a2ts -> temperature_sensor.air_temp_reading -> ctm -> isolette_monitor.validateCT -> ctvr -> temperature_regulator.regulate -> hc -> heat_source.heatOnOff -> hs -> heat_out;
		properties
			Required_Connection_Quality_Of_Service => (GuaranteedDelivery) applies to al;
		annex EMV2 {**
			use behavior IsoletteEM::FailStop;
			
			component error behavior
			propagations
				outprop: all -[1 ormore (heat_source.heat_out {HeaterError},
					operator_interface.operator_visual_information {DisplayError})]-> infantExposure {DangerousInfantExposure};
				outprop1: working -[1 ormore (operator_interface.alarm_sound {AlarmError})]-> infantExposure {DangerousInfantExposure};
			--			all -[ heat_source.heat_out{HeaterError}]-> heat_out{HeaterError};
			end component;
			
			composite error behavior
			states
				--			-- Figure 6 HB: parts & monitor alarm (see thermostat)
				--				BadHBCompositeFailed:[1 ormore(isolette_monitor.failed and 1 ormore (temperature_regulator.failed,  heat_source.Failed), temperature_sensor.failed, operator_interface.Failed ) ]-> badfail;
				--			-- corresponds to fault tree logic
				--				CompositeFailed:[1 ormore(isolette_monitor.failed and 1 ormore (temperature_regulator.failed,  heat_source.Failed, temperature_sensor.failed), operator_interface.Failed ) ]-> Failed;
				-- Figure 5 HB: parts & monitor alarm (see thermostat)
				CompositeFailed: [1 ormore (temperature_regulator.failed, temperature_sensor.failed, heat_source.Failed,
					operator_interface.Failed)]-> Failed;
			end composite;
			
			propagation paths
				heaterErrorEffect: heat_source.heat_out -> temperature_sensor.heaterEffect;
			end paths;
		**};
	end isolette.SingleSensor_Functional;
	

	
	-- regulator and monitor turned into software processes.
	-- they are bound to the same processor.
	system implementation isolette.SingleSensor_EmbeddedSWProcessesSingleCPUHW extends isolette.SingleSensor_Functional
		subcomponents
			temperature_regulator: refined to process RegulateTemperature::Regulate_Temperature_Pr {
						Classifier_Substitution_Rule => Type_Extension;};
			isolette_monitor: refined to process MonitorIsolette::Monitor_Isolette_pr {
						Classifier_Substitution_Rule => Type_Extension;};
			hw: system Devices::Platform.singleCPU;
		connections
			hwnetwork: bus access hw.network <-> operator_interface.network;
		properties
			Actual_Processor_Binding => (reference(hw.cpu1)) applies to temperature_regulator, isolette_monitor;
			Actual_Processor_Binding => (reference(hw.cpu1)) applies to  operator_interface;
	end isolette.SingleSensor_EmbeddedSWProcessesSingleCPUHW;


	-- second processor added and monitor bound to it instead of CPU1
	system implementation isolette.SingleSensor_EmbeddedSWProcesses2CPUHW extends isolette.SingleSensor_EmbeddedSWProcessesSingleCPUHW
		subcomponents
			hw: refined to system Devices::Platform.DualCPU;
--			operator_interface: refined to system OperatorInterface::operator_interface.impl;
		properties
			Actual_Processor_Binding => (reference(hw.cpu1)) applies to temperature_regulator;
			Actual_Processor_Binding => (reference(hw.cpu2)) applies to  isolette_monitor;
	end isolette.SingleSensor_EmbeddedSWProcesses2CPUHW;

	-- added power supply to supply power to 2 cpus and operator interface.
	system implementation isolette.SingleSensor_EmbeddedSWProcesses2CPUHWPower extends isolette.SingleSensor_EmbeddedSWProcesses2CPUHW
		subcomponents
			powersupply : device Devices::PowerSupply;
		connections
			p2hw: feature powersupply.power -> hw.power;
			p2OI: feature powersupply.power -> operator_interface.power;
	end isolette.SingleSensor_EmbeddedSWProcesses2CPUHWPower;
	
	
	system implementation isolette.SingleSensor_EmbeddedSWThreadsHW1CPU extends isolette.SingleSensor_EmbeddedSWProcessesSingleCPUHW
		subcomponents
			temperature_regulator: refined to process RegulateTemperature::Regulate_Temperature_Pr.impl {
						Classifier_Substitution_Rule => Type_Extension;};
			isolette_monitor: refined to process MonitorIsolette::Monitor_Isolette_pr.impl {
						Classifier_Substitution_Rule => Type_Extension;};
			operator_interface: refined to system OperatorInterface::operator_interface.impl;
	end isolette.SingleSensor_EmbeddedSWThreadsHW1CPU;


end Isolette;

